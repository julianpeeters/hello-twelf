nat : type.
z : nat.
s : nat -> nat.
%freeze nat.
%name nat N.

max : nat -> nat -> nat -> type.
%mode max +N1 +N2 -N3.
max/z1 : max z N N.
max/z2 : max N z N.
max/s : max (s N) (s M) (s P) <- max N M P.
%worlds () (max _ _ _).
%total [N1 N2] (max N1 N2 _).

tree : type.
leaf : tree.
node : tree -> tree -> tree.
%freeze tree.
%name tree T.

height : tree -> nat -> type.
%mode height +T -N.

height/leaf : height leaf z.
height/node 
  : height (node L R) (s H)
  <- height L HL
  <- height R HR
  <- max HL HR H.
%worlds () (height _ _).
%total T (height T _).

balanced : tree -> type.
balanced/leaf : balanced leaf.
balanced/node
  : balanced (node L R)
    <- height L H
    <- height R H.

% should have no solution, and does not
% %solve - : balanced (node leaf (node leaf leaf)).

% should have solution, and does
%solve - : balanced (node (node leaf leaf) (node leaf leaf)).

% solution offered by twelf:
sol1 = balanced/node (height/node max/z1 height/leaf height/leaf)
        (height/node max/z1 height/leaf height/leaf).

% another solution, of 4 total solutions (which differ in their references to zero)
sol2 = balanced/node (height/node max/z2 height/leaf height/leaf)
        (height/node max/z2 height/leaf height/leaf).

% conclusion: our representation is inadequate because, although there is correctly only one instance of evidence,
% `balanced (node (node leaf leaf) (node leaf leaf))`, there are serveral ways such evidence can be constructed.
% why is is an issue? Because other types will be indexed by the derivations, so we want a single cannonical derivation.

% however, we don't want this to have a solution (but does):
%solve - : balanced (node (node (node leaf leaf) leaf) (node leaf (node leaf leaf))).
%         O
%        / \
%       /   \
%      O     O
%     / \   / \
%    O   * *   O
%   / \       / \
%  *   *     *   *

balanced2 : tree -> type.
balanced2/leaf : balanced leaf.
balanced2/node : balanced (node L R)
                                    <- height L H
                                    <- height R H
                                    <- balanced2 L
                                    <- balanced2 R.

%%% Intrinsically typed balanced binary trees %%

% Compare with a Scala solution: https://gist.github.com/julianpeeters/7a859da6e2634dbee6ea9134d8d23464

bbt : nat -> type.
bLeaf : bbt z.
bNode : bbt N -> bbt N -> bbt (s N).

%solve tree1 : bbt (s (s (s z))).

% Proof of equality between trees.
eqTree : bbt N -> bbt N -> type.
% Note that the mode (+, +) returns a Pi, here an infinite product of unit.
%mode eqTree +T1 +T2.
eqTree/leaf : eqTree bLeaf bLeaf.
eqTree/node : eqTree (bNode L1 R1) (bNode L2 R2)
               <- eqTree L1 L2
               <- eqTree R1 R2.

%worlds () (eqTree _ _).
%total [T1 T2] (eqTree T1 T2).


% Exercise: do the same thing for AVL trees. That is, come up with
% an extrinsic and intrinsic encoding for trees whose branches are
% "at most 1 different" in height. Demonstrate that the extrinsic
% encoding is not adequate and the intrinsic one is.



difference : nat -> nat -> nat -> type.
%mode difference +N1 +N2 -N3.
difference/z1 : difference z N N.
difference/z2 : difference N z N.
difference/s : difference (s M) (s N) (s P) <- difference M N P.
%worlds () (difference _ _ _).
%total [N1 N2] (difference N1 N2 _).

avlTree : tree -> type.
avlTree/leaf : avlTree leaf.
avlTree/node-1: avlTree (node L R)
  <- height L (s H)
  <- height R H.
avlTree/node0: avlTree (node L R)
  <- height L H
  <- height R H.
avlTree/node+1: avlTree (node L R)
  <- height L H
  <- height R (s H).

%solve - : avlTree (leaf).
%solve - : avlTree (node leaf leaf).
%solve - : avlTree (node (node leaf leaf) leaf).
%solve - : avlTree (node (node leaf leaf) (node leaf leaf)).
%solve - : avlTree (node (node leaf leaf) (node leaf (node leaf leaf))).
%solve - : avlTree (node (node (node leaf leaf) leaf) (node leaf (node leaf leaf))).


avl : nat -> type.
avl/leaf : avl z.
avl/node-1: avl (s N) -> avl N -> avl (s (s N)).
avl/node0 : avl N -> avl N -> avl (s N).
avl/node+1: avl (s (s N)) -> avl N -> avl (s N).